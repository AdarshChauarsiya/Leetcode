# memomization

#include <bits/stdc++.h> 
int solve(vector<int> &nums,int n,vector<int>&dp){
    if(n<0)return 0;
    if(n==0) return nums[0];
    if(dp[n]!=-1)return dp[n];

    int inc=solve(nums,n-2,dp)+nums[n];
    int exc=solve(nums,n-1,dp)+0;
    dp[n]=max(inc,exc);
    return dp[n];
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n=nums.size();
    vector<int>dp(n,-1);
    int ans=solve(nums,n-1,dp);
    return ans;
}



tabulation


#include <bits/stdc++.h> 
int solve(vector<int> &nums,int n){
    // if(n<0)return 0;
    vector<int>dp(n,0);
    dp[0]=nums[0];
    // if(n==0) return nums[0];
    // if(dp[n]!=-1)return dp[n];
   for(int i=1;i<nums.size();i++){
       int inc=dp[i-2]+nums[i];
       int exc=dp[i-1]+0;
       dp[i]=max(inc,exc);
   }
   return dp[n-1];
    // int inc=solve(nums,n-2,dp)+nums[n];
    // int exc=solve(nums,n-1,dp)+0;
    // dp[n]=max(inc,exc);
    // return dp[n];
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n=nums.size();
    // vector<int>dp(n,-1);
    int ans=solve(nums,n);
    return ans;
}
