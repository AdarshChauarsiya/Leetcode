class Solution {
public:
    bool solve(vector<int>&nums,int index,int target,vector<vector<int>>&dp){
        if(index>=nums.size()) return 0;
        if(target<0) return 0;
        if(target==0) return 1;
        if(dp[index][target]!=-1) return dp[index][target];
        bool inc=solve(nums,index+1,target-nums[index],dp);
        bool exc=solve(nums,index+1,target,dp);
        return dp[index][target]=inc||exc;
    }
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        int target=sum/2;
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        if(sum%2!=0) return false;
        return solve(nums,0,target,dp);
    }
};
