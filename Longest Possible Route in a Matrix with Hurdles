 bool issafe(int newx, int newy, vector<vector<int>>& mat, int n, int m, vector<vector<bool>>& vis) {
    if (newx >= 0 && newy >= 0 && newx < n && newy < m && vis[newx][newy]!=1 && mat[newx][newy] != 0) {
        return true;
    }
    return false;
}

void solve(int i, int j, int xd, int yd, vector<vector<int>>& matrix, vector<vector<bool>>& vis, vector<int>& output, vector<vector<int>>& ans) {
    if (i == xd && j == yd) {
        ans.push_back(output);
        return;
    }
    vis[i][j] = 1;
    
    if (issafe(i + 1, j, matrix, matrix.size(), matrix[0].size(), vis)) {
        output.push_back(matrix[i + 1][j]);
        solve(i + 1, j, xd, yd, matrix, vis, output, ans);
        output.pop_back();
    }
    if (issafe(i - 1, j, matrix, matrix.size(), matrix[0].size(), vis)) {
        output.push_back(matrix[i - 1][j]);
        solve(i - 1, j, xd, yd, matrix, vis, output, ans);
        output.pop_back();
    }
    if (issafe(i, j + 1, matrix, matrix.size(), matrix[0].size(), vis)) {
        output.push_back(matrix[i][j + 1]);
        solve(i, j + 1, xd, yd, matrix, vis, output, ans);
        output.pop_back();
    }
    if (issafe(i, j - 1, matrix, matrix.size(), matrix[0].size(), vis)) {
        output.push_back(matrix[i][j - 1]);
        solve(i, j - 1, xd, yd, matrix, vis, output, ans);
        output.pop_back();
    }
    
    vis[i][j] = 0;
}

int longestPath(vector<vector<int>> matrix, int xs, int ys, int xd, int yd) {
    if (matrix[xs][ys] == 0 || matrix[xd][yd] == 0) {
        return -1; 
    }
    int n = matrix.size();
    int m = matrix[0].size();
    vector<vector<bool>> vis(n, vector<bool>(m, 0));
    vector<int> output{matrix[xs][ys]};
    vector<vector<int>> ans;
    
    solve(xs, ys, xd, yd, matrix, vis, output, ans);
    int maxLength = 0;
    for (auto& path : ans) {
        maxLength = max(maxLength, (int)path.size());
    }
    
    return maxLength > 0 ? maxLength-1 : -1;
}
