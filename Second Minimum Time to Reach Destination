class Solution {
public:
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        // Initialising the adjacency list
        vector<vector<int>> adj(n);
        for(auto e : edges){
            adj[e[0]-1].push_back(e[1]-1);
            adj[e[1]-1].push_back(e[0]-1);
        }

        /* Forming distance as a pair in which first store smaller distance 
           and second store larger distance and both distinct*/
        vector<pair<int, int>> dist(n, {1e9, 1e9});
        priority_queue<pair<int,int>> pq;

        dist[0] = {0, 1e9};
        pq.push({0, 0});
        
        // ^Normal Dijkstra Initialisation

        // BFS Loop ----> Starts
        while(!pq.empty()){
            auto [currTime, node] = pq.top();
            pq.pop();
            
            // As it is max heap we have to store neg. dist for low to high sorting
            currTime *= -1;
            if(currTime > dist[node].second)   continue;

            // If signal is green, reaching another node will take extra 'time' time
            int newTime = currTime + time;

            // If signal is red, we have stay to this node till signal is green again
            int temp = currTime/change;
            if(temp%2 == 1)     // Condition of Red Signal
                newTime = (temp+1)*change + time;

            // Traversing adjacent nodes
            for(auto adjNode : adj[node]){

                // If this newTime is smaller than the smallest distance of adjacent node
                if(dist[adjNode].first > newTime){
                    // Assign first value to second and assign first new smaller value
                    dist[adjNode].second = dist[adjNode].first;
                    dist[adjNode].first = newTime;

                    pq.push({-1*dist[adjNode].first, adjNode});
                }
                // Very important condition to ensure distince values in 'dist' vector for particular node.
                else if(dist[adjNode].first == newTime)
                    continue;
                else if(dist[adjNode].second > newTime){
                    dist[adjNode].second = newTime;
                    pq.push({-1*dist[adjNode].second, adjNode});
                }
            }
        }
        // BFS Loop ----> Ends

        return dist[n-1].second;
    }
};
