class Solution {
public:

    //HELPER FUNCTION TO FIND LCA
    void dfs(TreeNode* root,vector<int> &v ,int x,bool &y){
        if(root==NULL)return;
        if(root->val==x){
            y=true;
            v.push_back(root->val);
            return;
        }
        if(!y)dfs(root->left,v,x,y);
        if(!y)dfs(root->right,v,x,y);
        if(y)v.push_back(root->val);
    }


    //HELPER FUNCTION TO SEARCH NODE
    void search(TreeNode*root, int v, TreeNode* &ans){
        if(root==NULL)return ;
            if(root->val==v){
                ans=root;
            }
            search(root->left,v,ans);
            search(root->right,v,ans);
    }

    //MAIN FUNCTION
    string getDirections(TreeNode* root, int start, int dest) {
        vector<int> v1;
        vector<int> v2;
        bool y=false;
        bool z=false;
        dfs(root,v1,start,y);
        dfs(root,v2,dest,z);
        int i=0;
        reverse(v1.begin(),v1.end());
        reverse(v2.begin(),v2.end());
        while(i<v1.size() && i<v2.size()){
            if(v1[i]!=v2[i])break;
            i++;
        }
        i--;
        TreeNode* LCA= NULL;
        search(root,v1[i],LCA);               //WE FIND LCA USING ABOVE HELPER FUNCTIONS

        string ans="";                        //OUTPUT STRING
        reverse(v1.begin(),v1.end());
        for(int j=0;j<v1.size();j++){         // WENT FROM LEFT NODE TO LCA
            if(LCA->val==v1[j])break;
            ans+='U';
        }
        v1.clear();
        for(int j=0;j<v2.size();j++){
            if(v2[j]==LCA->val)z=false;
            if(!z)v1.push_back(v2[j]);
        }
        for(int e: v1){
            if(e==LCA->val)continue;          //WENT FROM LCA TO RIGHT NODE
            if(LCA->left!=NULL && LCA->left->val==e){
                ans+='L';
                LCA=LCA->left;
            }
            else if(LCA->right!=NULL) {
                ans+='R';
                LCA=LCA->right;
            }
        }
        return ans;
    }
};
