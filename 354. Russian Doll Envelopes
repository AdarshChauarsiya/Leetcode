class Solution {
public:
    // MEMOIZATION APPROCH 
    // int solve(vector<int>&ans,int curr,int prev,vector<vector<int>>dp){
    //     int n=ans.size();
    //     if(n==curr) return 0;
    //     if(dp[curr][prev+1]!=-1) return dp[curr][prev+1];
    //     int inc=0;
    //     if(prev==-1||ans[curr]>ans[prev]){
    //         inc=1+solve(ans,curr+1,curr,dp);
    //     }
    //     int exc=0+solve(ans,curr+1,prev,dp);
    //     dp[curr][prev+1]=max(inc,exc);
    //     return dp[curr][prev+1];
    // }

    // BINARY SEARCH APPROCH
    int solve(vector<int>&ans){
        int n=ans.size();
        if(n==0) return 0;
        vector<int>res;
        res.push_back(ans[0]);
        for(int i=1;i<ans.size();i++){
            if(ans[i]>res.back()){
                res.push_back(ans[i]);
            }else{
                int ind=lower_bound(res.begin(),res.end(),ans[i])-res.begin();
                res[ind]=ans[i];
            }
        }
        return res.size();
    }
    static bool comp(vector<int>& v1, vector<int>& v2) {
        if(v1[0] == v2[0])
            return v1[1] > v2[1];
        
        return v1[0] < v2[0];
    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(),envelopes.end(),comp);
        vector<int>ans;
        for(int i=0;i<envelopes.size();i++){
            ans.push_back(envelopes[i][1]);
        }
        int n=ans.size();
        //vector<vector<int>>dp(n,vector<int>(n,-1));
        return solve(ans);
    }
};
