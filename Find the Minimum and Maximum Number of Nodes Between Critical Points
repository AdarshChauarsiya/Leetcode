/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int>ans;
        ListNode*temp=head;
        int c=2;
        while(temp->next!=NULL&&temp->next->next!=NULL){
            ListNode*curr=temp->next;
            //local minima
            if(curr->val<temp->val && curr->val<curr->next->val){
                cout<<curr->val<<':'<<c<<endl;
                 ans.push_back(c);
            }//local maxima
            else if(curr->val>temp->val && curr->val>curr->next->val){
                cout<<curr->val<<':'<<c<<endl;
                 ans.push_back(c);
            }
            temp=temp->next;
            c++;
        }
        sort(ans.begin(),ans.end());
        if(ans.size()==0||ans.size()==1)return {-1,-1};
        int mini=INT_MAX;
        for(int i=0;i<ans.size()-1;i++){
            mini=min(mini,(ans[i+1]-ans[i]));
        }
        int max=ans[ans.size()-1]-ans[0];
        return {mini,max};
    }
};
