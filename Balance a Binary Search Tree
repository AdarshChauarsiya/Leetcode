/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
    void fillVector(TreeNode* root, vector<int>& v) {
        if (root == NULL)
            return;
        fillVector(root->left, v);
        v.push_back(root->val);
        fillVector(root->right, v);
    }
    TreeNode* formTree(vector<int>& v, int s, int e) {
        if (s > e)
            return NULL;
        int mid = (e - s) / 2 + s;
        TreeNode* root = new TreeNode(v[mid]);
        root->left = formTree(v, s, mid - 1);
        root->right = formTree(v, mid + 1, e);
        return root;
    }

public:
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> v;
        fillVector(root, v);
        return formTree(v, 0, v.size() - 1);
    }
};
