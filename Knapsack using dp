int solve(int W,int wt[],int val[],int i,vector<vector<int>>&dp){
        if(i==0){
            if(wt[0]<=W) return val[0];
            else return 0;
        }
        if(dp[i][W]!=-1) return dp[i][W];
        int inc=0;
        if(wt[i]<=W){
            inc=solve(W-wt[i],wt,val,i-1,dp)+val[i];
        }
        int exc=solve(W,wt,val,i-1,dp);
        dp[i][W]=max(inc,exc);
        return dp[i][W];
    }
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>>dp(n,vector<int>(W+1,-1));
       int ans=solve(W,wt,val,n-1,dp);
       return ans;
    }
